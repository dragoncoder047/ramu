{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/math.ts", "../../src/generators.ts", "../../node_modules/.pnpm/zzfx@1.3.0/node_modules/zzfx/ZzFX.js", "../../src/instruments/zzfx_instrument.ts", "../../src/weighting.ts", "../../demo/main.ts"],
  "sourcesContent": ["export type Note = {\n    duration: number;\n    pitch?: number;\n    instrument?: string;\n    volume?: number;\n    pan?: number;\n} & Record<string, any>;\n\nexport type State = Record<string, number | number[]>;\nexport type WFun = (state: State) => number | undefined;\nexport type Weight = number | WFun;\nexport type LiteralWeightlist = (Weight | [Weight, Weight])[];\nexport const toWFun = (x: Weight): WFun => (state: State) => typeof x === \"number\" ? x : x(state);\n\nexport type NoteGenerator = Iterator<{ state?: State, notes?: Note[] } | undefined, void, State>;\n\nexport class AutoSong {\n    #uniforms: Record<string, number>;\n    state: Record<string, number | number[]>;\n    generators: NoteGenerator[];\n\n    constructor(uniforms: Record<string, number>, generators: NoteGenerator[]) {\n        this.#uniforms = uniforms;\n        this.state = {};\n        this.generators = generators;\n    }\n\n    send(newUniforms: any) {\n        Object.assign(this.#uniforms, newUniforms);\n    }\n\n    step() {\n        const notes: Note[] = [];\n        for (const gen of this.generators) {\n            const res = gen.next(Object.assign(this.state, this.#uniforms));\n            if (res.done) throw new Error(\"NoteGenerator can never finish\");\n            if (res) {\n                Object.assign(this.state, res.value?.state ?? {});\n                if (res.value?.notes) notes.push(...res.value.notes);\n            }\n        }\n        return notes;\n    }\n}\n", "export function dissonance(x: number): number {\n    // https://cscheid.net/v2/explainers/music/consonance-and-dissonance.html\n    // f'(x) = abs(fp(x-1)/(1+f^2(x-1)^2)^2)\n\n    // TODO: parameterize these magic numbers\n    const p = 3.1;\n    const f = 10;\n    const xm1 = x - 1;\n    return abs(f * p * xm1 / sq(1 + sq(f) * sq(xm1)));\n}\n\n\n\nconst abs = Math.abs;\nconst sq = (x: number) => x ** 2;\n\nconst NORM_MAGIC = 4 * Math.exp(-1 / 2) * Math.SQRT2;\n\nclass RNG {\n    random = Math.random;\n    randrange(lo: number, hi: number): number {\n        return Math.floor(this.random() * (hi - lo)) + lo;\n    }\n    choose<T>(from: T[], weights?: number[]): T {\n        if (!weights) {\n            return from[this.randrange(0, from.length)]!;\n        } else if (weights.length != from.length) {\n            throw new Error(\"Weights array is not the same length as values array\");\n        }\n        const one = weights.reduce((a, b) => a + b, 0);\n        const randVal = this.randrange(0, one);\n        var sum = 0;\n        for (var i = 0; i < from.length; i++) {\n            sum += weights[i]!;\n            if (sum > randVal) return from[i]!;\n        }\n        throw new Error(\"unreachable\");\n    }\n    percent(pct: number): boolean {\n        return pct >= this.randrange(1, 101);\n    }\n\n    pickOne<T>(a: T, b: T, bias: number): T {\n        const breakpoint = 1 / (1 + Math.exp(-bias));\n        return this.choose([a, b], [1 - breakpoint, breakpoint]);\n    }\n\n    gaussian(mu: number, sigma: number): number {\n        var z: number;\n        do {\n            var u1 = this.random();\n            var u2 = 1. - this.random();\n            z = NORM_MAGIC * (u1 - 1 / 2) / u2;\n            var zz = z * z / 4;\n        } while (zz > -Math.log(u2));\n        return mu + z * sigma;\n    }\n}\nexport const Random = new RNG;\n\nexport function pitchToFrequency(pitch: number, root: number, notesPerOctave: number): number {\n    return root * Math.pow(2, pitch / notesPerOctave);\n}\n", "import { State, WFun } from \".\";\nimport { Random } from \"./math\";\n\ntype Tuple<T, Len extends number> = Len extends Len ? number extends Len ? T[] : _TupleOf<T, Len, []> : never;\ntype _TupleOf<T, Len extends number, Acc extends T[]> = Acc[\"length\"] extends Len ? Acc : _TupleOf<T, Len, [T, ...Acc]>;\n\nexport enum RTU {\n    SUB_NOTE,\n    BEAT,\n    MEASURE,\n    PHRASE,\n    SECTION\n};\n\nexport function* masterClock(weightMap: Record<RTU, WFun>, reUpRhythmAt = RTU.SECTION) {\n    var chosenBases: Tuple<number, 5> = [0, 0, 0, 0, 0];\n    const tickers: Tuple<number, 5> = [0, 0, 0, 0, 0];\n    const reUp = () => {\n        for (var i = RTU.SUB_NOTE; i < chosenBases.length; i++) {\n            chosenBases[i] = weightMap[i]!({})!;\n        }\n    };\n    reUp();\n    var rollover = 0;\n    var state: State = yield;\n    for (; ;) {\n        state = yield {\n            state: {\n                clock: tickers,\n                clockBases: chosenBases,\n                invClock: tickers.map((c, i) => chosenBases[i]! - c),\n                clockRollover: rollover,\n                timeSlice: 60 / (state.tempo as number) / chosenBases[RTU.SUB_NOTE],\n            }\n        };\n        tickers[0]++;\n        rollover = 0;\n        for (var i = 0; i < tickers.length; i++) {\n            if (tickers[i]! >= chosenBases[i]!) {\n                tickers[i] = 0;\n                rollover++;\n                if (i + 1 < tickers.length) {\n                    tickers[i + 1]!++;\n                    if (i + 1 === reUpRhythmAt) reUp();\n                }\n            } else break;\n        }\n    }\n}\n\nexport function* constant(obj: Partial<State>, once = true) {\n    yield; // consume initial state input\n    for (; ;) {\n        yield { state: obj as State };\n        if (once) (obj as any) = undefined;\n    }\n}\n\nexport function* changeEvery(what: string, when: RTU, fun: WFun) {\n    var state: State = yield;\n    var val = fun(state)!;\n    for (; ;) {\n        if ((state.clockRollover as number) >= when)\n            val = fun(state)!;\n        state = yield { state: { [what]: val } };\n    }\n}\n\nexport function* drumGenerator(drum: string, strengthFun: WFun) {\n    const history: number[] = [];\n    var state: State = yield;\n    for (; ;) {\n        const vol = strengthFun({ ...state, history });\n        history.push(vol ?? 0);\n        state = yield {\n            notes: vol && vol > 0 ? [{ instrument: drum, volume: vol, duration: 1 }] : []\n        };\n    }\n}\n\nexport function* rootNoteGenerator(changeEvery: RTU, steps: WFun) {\n    var state: State = yield;\n    var note = state.root as number;\n    for (; ;) {\n        if ((state.clockRollover as number) >= changeEvery) {\n            const howmuch = Math.pow(2, Math.round(steps(state)!) / (state.notesPerOctave as number));\n            note *= Random.pickOne(howmuch, -howmuch, 0.5);\n        }\n        state = yield { state: { root: note } };\n    }\n}\n", "/*\r\n\r\nZzFX - Zuper Zmall Zound Zynth v1.3.0 by Frank Force\r\nhttps://github.com/KilledByAPixel/ZzFX\r\n\r\nZzFX Features\r\n\r\n- Tiny synth engine with 20 controllable parameters.\r\n- Play sounds via code, no need for sound assed files!\r\n- Compatible with most modern web browsers.\r\n- Small code footprint, the micro version is under 1 kilobyte.\r\n- Can produce a huge variety of sound effect types.\r\n- Sounds can be played with a short call. zzfx(...[,,,,.1,,,,9])\r\n- A small bit of randomness appied to sounds when played.\r\n- Use ZZFX.GetNote to get frequencies on a standard diatonic scale.\r\n- Sounds can be saved out as wav files for offline playback.\r\n- No additional libraries or dependencies are required.\r\n\r\n*/\r\n/*\r\n\r\n  ZzFX MIT License\r\n  \r\n  Copyright (c) 2019 - Frank Force\r\n  \r\n  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n  of this software and associated documentation files (the \"Software\"), to deal\r\n  in the Software without restriction, including without limitation the rights\r\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n  copies of the Software, and to permit persons to whom the Software is\r\n  furnished to do so, subject to the following conditions:\r\n  \r\n  The above copyright notice and this permission notice shall be included in all\r\n  copies or substantial portions of the Software.\r\n  \r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n  SOFTWARE.\r\n  \r\n*/\r\n\r\n'use strict';\r\n\r\n// play a zzfx sound\r\nexport function zzfx(...parameters) { return ZZFX.play(...parameters) }\r\n\r\n// zzfx object with some extra functionalty\r\nexport const ZZFX =\r\n{\r\n    // master volume scale\r\n    volume: .3,\r\n    \r\n    // sample rate for audio\r\n    sampleRate: 44100,\r\n    \r\n    // create shared audio context\r\n    x: new AudioContext,\r\n\r\n    // play a sound from zzfx paramerters\r\n    play: function(...parameters)\r\n    {\r\n        // build samples and start sound\r\n        return this.playSamples(this.buildSamples(...parameters));\r\n    },\r\n\r\n    // play an array of samples\r\n    playSamples: function(...samples)\r\n    {\r\n        // create buffer and source\r\n        const buffer = this.x.createBuffer(samples.length, samples[0].length, this.sampleRate),\r\n            source = this.x.createBufferSource();\r\n\r\n        samples.map((d,i)=> buffer.getChannelData(i).set(d));\r\n        source.buffer = buffer;\r\n        source.connect(this.x.destination);\r\n        source.start();\r\n        return source;\r\n    },\r\n\r\n    // build an array of samples\r\n    buildSamples: function\r\n    (\r\n        volume = 1, \r\n        randomness = .05,\r\n        frequency = 220,\r\n        attack = 0,\r\n        sustain = 0,\r\n        release = .1,\r\n        shape = 0,\r\n        shapeCurve = 1,\r\n        slide = 0, \r\n        deltaSlide = 0, \r\n        pitchJump = 0, \r\n        pitchJumpTime = 0, \r\n        repeatTime = 0, \r\n        noise = 0,\r\n        modulation = 0,\r\n        bitCrush = 0,\r\n        delay = 0,\r\n        sustainVolume = 1,\r\n        decay = 0,\r\n        tremolo = 0,\r\n        filter = 0\r\n    )\r\n    {\r\n        // init parameters\r\n        let PI2 = Math.PI*2, sign = v => v<0?-1:1, sampleRate = this.sampleRate,\r\n            startSlide = slide *= 500 * PI2 / sampleRate / sampleRate,\r\n            startFrequency = frequency *= \r\n                (1 + randomness*2*Math.random() - randomness) * PI2 / sampleRate,\r\n            b = [], t = 0, tm = 0, i = 0, j = 1, r = 0, c = 0, s = 0, f, length,\r\n\r\n            // biquad LP/HP filter\r\n            quality = 2, w = PI2 * Math.abs(filter) * 2 / sampleRate,\r\n            cos = Math.cos(w), alpha = Math.sin(w) / 2 / quality,\r\n            a0 = 1 + alpha, a1 = -2*cos / a0, a2 = (1 - alpha) / a0,\r\n            b0 = (1 + sign(filter) * cos) / 2 / a0, \r\n            b1 = -(sign(filter) + cos) / a0, b2 = b0,\r\n            x2 = 0, x1 = 0, y2 = 0, y1 = 0;\r\n\r\n        // scale by sample rate\r\n        attack = attack * sampleRate + 9; // minimum attack to prevent pop\r\n        decay *= sampleRate;\r\n        sustain *= sampleRate;\r\n        release *= sampleRate;\r\n        delay *= sampleRate;\r\n        deltaSlide *= 500 * PI2 / sampleRate**3;\r\n        modulation *= PI2 / sampleRate;\r\n        pitchJump *= PI2 / sampleRate;\r\n        pitchJumpTime *= sampleRate;\r\n        repeatTime = repeatTime * sampleRate | 0;\r\n        volume *= this.volume;\r\n\r\n        // generate waveform\r\n        for(length = attack + decay + sustain + release + delay | 0;\r\n            i < length; b[i++] = s * volume)               // sample\r\n        {\r\n            if (!(++c%(bitCrush*100|0)))                   // bit crush\r\n            {\r\n                s = shape? shape>1? shape>2? shape>3?      // wave shape\r\n                    Math.sin(t*t) :                        // 4 noise\r\n                    Math.max(Math.min(Math.tan(t),1),-1):  // 3 tan\r\n                    1-(2*t/PI2%2+2)%2:                     // 2 saw\r\n                    1-4*Math.abs(Math.round(t/PI2)-t/PI2): // 1 triangle\r\n                    Math.sin(t);                           // 0 sin\r\n\r\n                s = (repeatTime ?\r\n                        1 - tremolo + tremolo*Math.sin(PI2*i/repeatTime) // tremolo\r\n                        : 1) *\r\n                    sign(s)*(Math.abs(s)**shapeCurve) *      // curve\r\n                    (i < attack ? i/attack :                 // attack\r\n                    i < attack + decay ?                     // decay\r\n                    1-((i-attack)/decay)*(1-sustainVolume) : // decay falloff\r\n                    i < attack  + decay + sustain ?          // sustain\r\n                    sustainVolume :                          // sustain volume\r\n                    i < length - delay ?                     // release\r\n                    (length - i - delay)/release *           // release falloff\r\n                    sustainVolume :                          // release volume\r\n                    0);                                      // post release\r\n\r\n                s = delay ? s/2 + (delay > i ? 0 :           // delay\r\n                    (i<length-delay? 1 : (length-i)/delay) * // release delay \r\n                    b[i-delay|0]/2/volume) : s;              // sample delay\r\n\r\n                if (filter)                                   // apply filter\r\n                    s = y1 = b2*x2 + b1*(x2=x1) + b0*(x1=s) - a2*y2 - a1*(y2=y1);\r\n            }\r\n\r\n            f = (frequency += slide += deltaSlide) *// frequency\r\n                Math.cos(modulation*tm++);          // modulation\r\n            t += f + f*noise*Math.sin(i**5);        // noise\r\n\r\n            if (j && ++j > pitchJumpTime)           // pitch jump\r\n            { \r\n                frequency += pitchJump;             // apply pitch jump\r\n                startFrequency += pitchJump;        // also apply to start\r\n                j = 0;                              // stop pitch jump time\r\n            } \r\n\r\n            if (repeatTime && !(++r % repeatTime))  // repeat\r\n            { \r\n                frequency = startFrequency;         // reset frequency\r\n                slide = startSlide;                 // reset slide\r\n                j = j || 1;                         // reset pitch jump time\r\n            }\r\n        }\r\n\r\n        return b;\r\n    },\r\n    \r\n    // get frequency of a musical note on a diatonic scale\r\n    getNote: function(semitoneOffset=0, rootNoteFrequency=440)\r\n    {\r\n        return rootNoteFrequency * 2**(semitoneOffset/12);\r\n    }\r\n\r\n} // ZZFX", "import { ZZFX } from \"zzfx\";\nimport { Instrument } from \"../instrument\";\nimport { Note } from \"..\";\n\nconst defaultParams = [\n    /* volume = */ 1,\n    /* randomness = */ .05,\n    /* frequency = */ 220,\n    /* attack = */ 0,\n    /* sustain = */ 0,\n    /* release = */ .1,\n    /* shape = */ 0,\n    /* shapeCurve = */ 1,\n    /* slide = */ 0,\n    /* deltaSlide = */ 0,\n    /* pitchJump = */ 0,\n    /* pitchJumpTime = */ 0,\n    /* repeatTime = */ 0,\n    /* noise = */ 0,\n    /* modulation = */ 0,\n    /* bitCrush = */ 0,\n    /* delay = */ 0,\n    /* sustainVolume = */ 1,\n    /* decay = */ 0,\n    /* tremolo = */ 0,\n    /* filter = */ 0\n] as const;\n\nconst defaultPitchMod = [2, 11, 12, 14, 19];\n\nexport class ZzFXDrumInstrument implements Instrument {\n    id: string;\n    zzArray: number[];\n    constructor(id: string, zzArray: (number | undefined)[]) {\n        this.zzArray = defaultParams.map((d, i) => zzArray[i] ?? d);\n        // this.zzArray[1] = 0; // allow zero randomness here!!\n        this.id = id;\n    }\n    play(note: Note, _tickLen: number): AudioBufferSourceNode | undefined {\n        const zz = this.zzArray.slice();\n        // set master volume\n        zz[0]! *= note.volume ?? 1;\n        return ZZFX.play(...zz);\n    }\n}\n\nexport class ZzFXInstrument extends ZzFXDrumInstrument {\n    pitchMod: number[];\n    constructor(id: string, zzArray: (number | undefined)[], pitchMod = defaultPitchMod) {\n        super(id, zzArray);\n        this.pitchMod = pitchMod;\n    }\n    play(note: Note, tickLen: number) {\n        if (!note.pitch) return;\n        const zz = this.zzArray.slice();\n        // set master volume\n        zz[0]! *= note.volume ?? 1;\n        // set pitch\n        for (var i of this.pitchMod) zz[i]! *= note.pitch;\n        // set sustain from duration and attack time\n        zz[4]! = Math.max(0, note.duration * tickLen - zz[3]!);\n        return ZZFX.play(...zz);\n    }\n}\n", "import { LiteralWeightlist, toWFun, Weight, WFun } from \".\";\nimport { RTU } from \"./generators\";\nimport { dissonance, Random } from \"./math\";\n\nexport function startOf(which = RTU.SUB_NOTE): WFun {\n    return state => Number((state.clockRollover as number) >= which);\n}\n\nexport function fracOf(frac: number, which = RTU.SUB_NOTE): WFun {\n    const pStart = startOf(which - 1);\n    return state => {\n        if (!pStart(state)) return 0;\n        const tVal = (state.clock as number[])[which]!;\n        const tMax = (state.clockBases as number[])[which]!;\n        return tMax * frac > tVal ? 1 : 0;\n    }\n}\n\nexport function consonanceOfInterval(interval: number): WFun {\n    // TODO: the 2 - is another magic constant\n    return state => 2 - dissonance(Math.pow(2, -(state.notesPerOctave as number)) * interval);\n}\n\nexport function backHistory(amount: Weight, column = RTU.MEASURE): WFun {\n    const amount2 = toWFun(amount);\n    return state => {\n        const a = amount2(state);\n        if (!a) return;\n        const index = a * (state.clockBases as number[]).slice(column).reduce((a, b) => a * b, 1);\n        return (state.history as number[]).at(-index);\n    }\n}\n\n\nexport function density(den: Weight, window: Weight): WFun {\n    const den2 = toWFun(den);\n    const win2 = toWFun(window);\n    return state => {\n        const hist = state.history as number[];\n        const winLen = Math.round(win2(state)!);\n        const bits = hist.slice(-winLen);\n        const tgtDen = den2(state)!;\n        const x = bits.reduce((a, b) => a + b, 0) / bits.length - tgtDen;\n        return 1 / (1 + Math.exp(-x));\n    }\n}\n\n// MARK: Higher order WFun\n\nexport function pickRand(...choices: LiteralWeightlist): WFun {\n    const fixedChoices = choices.map(v => Array.isArray(v) ? [toWFun(v[0]), toWFun(v[1])] as const : [toWFun(v), () => 1] as const);\n    return state => {\n        const now = fixedChoices.map(([a, b]) => [a(state), b(state) ?? 1] as const);\n        const vThis = now.flatMap(([v, w]) => v !== undefined && !isNaN(w) ? [v] : []);\n        const wThis = now.flatMap(([v, w]) => v !== undefined && !isNaN(w) ? [w] : []);\n        if (vThis.length === 0 || wThis.every(w => w === 0)) return;\n        return Random.choose(vThis, wThis);\n    }\n}\n\nexport function reduceMul(...values: Weight[]): WFun {\n    const values2 = values.map(toWFun);\n    return state => values2.map(v => v(state)).reduce((a, b) => (a ?? 0) * (b ?? 0), 1);\n}\n", "import { AutoSong } from \"../src\";\nimport { changeEvery, constant, drumGenerator, masterClock, rootNoteGenerator, RTU } from \"../src/generators\";\nimport { ZzFXDrumInstrument } from \"../src/instruments/zzfx_instrument\";\nimport { backHistory, consonanceOfInterval, density, fracOf, pickRand, reduceMul, startOf } from \"../src/weighting\";\n\nconst uniforms = {\n    // repetitiveness: 5,\n    // beatStrength: 5\n};\n\nconst autoSong = new AutoSong(uniforms, [\n    constant({\n        root: 220 * Math.pow(2, 7 / 12), /* E4 */\n        notesPerOctave: 12,\n        tempo: 128,\n    }),\n    masterClock({\n        [RTU.SUB_NOTE]: pickRand([4, 2], [3, 1]),\n        [RTU.BEAT]: pickRand([2, 50], [3, 50], [4, 100], [5, 4], [6, 20], [7, 2], [8, 50], [9, 6], [11, 1]),\n        [RTU.MEASURE]: pickRand([4, 10], [5, 2], [8, 2]),\n        [RTU.PHRASE]: pickRand([4, 10], [2, 1], [6, 2], [1, 5]),\n        [RTU.SECTION]: () => 1\n    }),\n    drumGenerator(\"bass\",\n        pickRand(\n            [1, reduceMul(500, startOf(RTU.BEAT))],\n            [0.2, 1],\n            [0, 100],\n            [density(0.25, 4), reduceMul(density(0.25, 4), 20)],\n            [backHistory((state: any) => state.clockBases?.[RTU.BEAT], RTU.BEAT), 100],\n            [backHistory((state: any) => state.clockBases?.[RTU.MEASURE], RTU.MEASURE), 50]\n        )),\n    drumGenerator(\"snare\",\n        pickRand(\n            [fracOf(0.5, RTU.MEASURE), 500],\n            [0.2, 1],\n            [0, 10],\n            [density(0.2, 4), reduceMul(density(0.8, 4), 20)],\n            [backHistory((state: any) => state.clockBases?.[RTU.BEAT], RTU.BEAT), 100],\n            [backHistory((state: any) => state.clockBases?.[RTU.MEASURE], RTU.MEASURE), 50]\n        )),\n    drumGenerator(\"hi-hat\",\n        pickRand(\n            [1, reduceMul(startOf(RTU.BEAT), 10)],\n            [0.8, reduceMul(fracOf(0.5, RTU.BEAT), 10)],\n            [0, 10],\n            [density(0.8, 4), reduceMul(density(0.2, 4), 20)],\n            [backHistory((state: any) => state.clockBases?.[RTU.BEAT], RTU.BEAT), 100],\n            [backHistory((state: any) => state.clockBases?.[RTU.MEASURE], RTU.MEASURE), 50]\n        )),\n    changeEvery(\"notesPerOctave\", RTU.SECTION,\n        pickRand(\n            [12, 1000],\n            [24, 200],\n            [31, 2],\n            [33, 2],\n            [43, 3],\n        )),\n    rootNoteGenerator(RTU.SECTION,\n        pickRand(\n            [1, consonanceOfInterval(1)],\n            [2, consonanceOfInterval(2)],\n            [3, consonanceOfInterval(3)],\n        )),\n]);\n\nconst instruments = [\n    new ZzFXDrumInstrument(\"snare\", [2, 0, 660, , , .09, 3, , , , , , .2, 2, , , , 1.1]),\n    new ZzFXDrumInstrument(\"bass\", [4, 0, 80, , , .2, 1, 4, -2, 6, 50, .15, , 6]),\n    new ZzFXDrumInstrument(\"hi-hat\", [, 0, 3520, , , .11, 3, 1.65, , , , , , 2]),\n];\n\nfunction tick() {\n    const notes = autoSong.step();\n    notes.forEach(n => {\n        if (n.instrument)\n            instruments.find(i => i.id === n.instrument)?.play(n, autoSong.state.timeSlice as number);\n    });\n    dataArea.textContent = JSON.stringify(autoSong.state, undefined, 2);\n    setTimeout(tick, autoSong.state.timeSlice as number * 1000);\n}\n// --------------------------------------------------------------\n\nconst $ = <T extends HTMLElement>(s: string): T | null => document.querySelector(s);\n\nconst startBtn = $<HTMLButtonElement>(\"#start\")!;\nconst dataArea = $<HTMLPreElement>(\"#data\")!;\n\nstartBtn.addEventListener(\"click\", () => {\n    startBtn.remove();\n    tick();\n});\n"],
  "mappings": "AAYO,IAAMA,EAAUC,GAAqBC,GAAiB,OAAOD,GAAM,SAAWA,EAAIA,EAAEC,CAAK,EAInFC,EAAN,KAAe,CAClBC,GACA,MACA,WAEA,YAAYC,EAAkCC,EAA6B,CACvE,KAAKF,GAAYC,EACjB,KAAK,MAAQ,CAAC,EACd,KAAK,WAAaC,CACtB,CAEA,KAAKC,EAAkB,CACnB,OAAO,OAAO,KAAKH,GAAWG,CAAW,CAC7C,CAEA,MAAO,CACH,IAAMC,EAAgB,CAAC,EACvB,QAAWC,KAAO,KAAK,WAAY,CAC/B,IAAMC,EAAMD,EAAI,KAAK,OAAO,OAAO,KAAK,MAAO,KAAKL,EAAS,CAAC,EAC9D,GAAIM,EAAI,KAAM,MAAM,IAAI,MAAM,gCAAgC,EAC1DA,IACA,OAAO,OAAO,KAAK,MAAOA,EAAI,OAAO,OAAS,CAAC,CAAC,EAC5CA,EAAI,OAAO,OAAOF,EAAM,KAAK,GAAGE,EAAI,MAAM,KAAK,EAE3D,CACA,OAAOF,CACX,CACJ,EC3CO,SAASG,GAAWC,EAAmB,CAO1C,IAAMC,EAAMD,EAAI,EAChB,OAAOE,GAAI,GAAI,IAAID,EAAME,EAAG,EAAIA,EAAG,EAAC,EAAIA,EAAGF,CAAG,CAAC,CAAC,CACpD,CAIA,IAAMC,GAAM,KAAK,IACXC,EAAMH,GAAcA,GAAK,EAEzBI,GAAa,EAAI,KAAK,IAAI,GAAK,CAAC,EAAI,KAAK,MAEzCC,EAAN,KAAU,CACN,OAAS,KAAK,OACd,UAAUC,EAAYC,EAAoB,CACtC,OAAO,KAAK,MAAM,KAAK,OAAO,GAAKA,EAAKD,EAAG,EAAIA,CACnD,CACA,OAAUE,EAAWC,EAAuB,CACxC,GAAKA,GAEE,GAAIA,EAAQ,QAAUD,EAAK,OAC9B,MAAM,IAAI,MAAM,sDAAsD,MAFtE,QAAOA,EAAK,KAAK,UAAU,EAAGA,EAAK,MAAM,CAAC,EAI9C,IAAME,EAAMD,EAAQ,OAAO,CAAC,EAAGE,IAAM,EAAIA,EAAG,CAAC,EACvCC,EAAU,KAAK,UAAU,EAAGF,CAAG,EAErC,QADIG,EAAM,EACDC,EAAI,EAAGA,EAAIN,EAAK,OAAQM,IAE7B,GADAD,GAAOJ,EAAQK,CAAC,EACZD,EAAMD,EAAS,OAAOJ,EAAKM,CAAC,EAEpC,MAAM,IAAI,MAAM,aAAa,CACjC,CACA,QAAQC,EAAsB,CAC1B,OAAOA,GAAO,KAAK,UAAU,EAAG,GAAG,CACvC,CAEA,QAAWC,EAAML,EAAMM,EAAiB,CACpC,IAAMC,EAAa,GAAK,EAAI,KAAK,IAAI,CAACD,CAAI,GAC1C,OAAO,KAAK,OAAO,CAACD,EAAGL,CAAC,EAAG,CAAC,EAAIO,EAAYA,CAAU,CAAC,CAC3D,CAEA,SAASC,EAAYC,EAAuB,CACxC,IAAIC,EACJ,EAAG,CACC,IAAIC,EAAK,KAAK,OAAO,EACjBC,EAAK,EAAK,KAAK,OAAO,EAC1BF,EAAIjB,IAAckB,EAAK,EAAI,GAAKC,EAChC,IAAIC,EAAKH,EAAIA,EAAI,CACrB,OAASG,EAAK,CAAC,KAAK,IAAID,CAAE,GAC1B,OAAOJ,EAAKE,EAAID,CACpB,CACJ,EACaK,EAAS,IAAIpB,EC5CnB,SAAUqB,GAAYC,EAA8BC,EAAe,EAAa,CACnF,IAAIC,EAAgC,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,EAClD,IAAMC,EAA4B,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,EAC1CC,EAAO,IAAM,CACf,QAASC,EAAI,EAAcA,EAAIH,EAAY,OAAQG,IAC/CH,EAAYG,CAAC,EAAIL,EAAUK,CAAC,EAAG,CAAC,CAAC,CAEzC,EACAD,EAAK,EAGL,QAFIE,EAAW,EACXC,EAAe,QACT,CACNA,EAAQ,KAAM,CACV,MAAO,CACH,MAAOJ,EACP,WAAYD,EACZ,SAAUC,EAAQ,IAAI,CAAC,EAAGE,IAAMH,EAAYG,CAAC,EAAK,CAAC,EACnD,cAAeC,EACf,UAAW,GAAMC,EAAM,MAAmBL,EAAY,CAAY,CACtE,CACJ,EACAC,EAAQ,CAAC,IACTG,EAAW,EACX,QAASD,EAAI,EAAGA,EAAIF,EAAQ,QACpBA,EAAQE,CAAC,GAAMH,EAAYG,CAAC,EADAA,IAE5BF,EAAQE,CAAC,EAAI,EACbC,IACID,EAAI,EAAIF,EAAQ,SAChBA,EAAQE,EAAI,CAAC,IACTA,EAAI,IAAMJ,GAAcG,EAAK,EAIjD,CACJ,CAEO,SAAUI,GAASC,EAAqBC,EAAO,GAAM,CAExD,IADA,QAEI,KAAM,CAAE,MAAOD,CAAa,EACxBC,IAAOD,EAAc,OAEjC,CAEO,SAAUE,GAAYC,EAAcC,EAAWC,EAAW,CAG7D,QAFIP,EAAe,MACfQ,EAAMD,EAAIP,CAAK,IAEVA,EAAM,eAA4BM,IACnCE,EAAMD,EAAIP,CAAK,GACnBA,EAAQ,KAAM,CAAE,MAAO,CAAE,CAACK,CAAI,EAAGG,CAAI,CAAE,CAE/C,CAEO,SAAUC,EAAcC,EAAcC,EAAmB,CAC5D,IAAMC,EAAoB,CAAC,EAE3B,QADIZ,EAAe,QACT,CACN,IAAMa,EAAMF,EAAY,CAAE,GAAGX,EAAO,QAAAY,CAAQ,CAAC,EAC7CA,EAAQ,KAAKC,GAAO,CAAC,EACrBb,EAAQ,KAAM,CACV,MAAOa,GAAOA,EAAM,EAAI,CAAC,CAAE,WAAYH,EAAM,OAAQG,EAAK,SAAU,CAAE,CAAC,EAAI,CAAC,CAChF,CACJ,CACJ,CAEO,SAAUC,GAAkBV,EAAkBW,EAAa,CAG9D,QAFIf,EAAe,MACfgB,EAAOhB,EAAM,OACP,CACN,GAAKA,EAAM,eAA4BI,EAAa,CAChD,IAAMa,EAAU,KAAK,IAAI,EAAG,KAAK,MAAMF,EAAMf,CAAK,CAAE,EAAKA,EAAM,cAAyB,EACxFgB,GAAQE,EAAO,QAAQD,EAAS,CAACA,EAAS,EAAG,CACjD,CACAjB,EAAQ,KAAM,CAAE,MAAO,CAAE,KAAMgB,CAAK,CAAE,CAC1C,CACJ,CCvCO,IAAMG,GACb,CAEI,OAAQ,GAGR,WAAY,MAGZ,EAAG,IAAI,aAGP,KAAM,YAAYC,EAClB,CAEI,OAAO,KAAK,YAAY,KAAK,aAAa,GAAGA,CAAU,CAAC,CAC5D,EAGA,YAAa,YAAYC,EACzB,CAEI,IAAMC,EAAS,KAAK,EAAE,aAAaD,EAAQ,OAAQA,EAAQ,CAAC,EAAE,OAAQ,KAAK,UAAU,EACjFE,EAAS,KAAK,EAAE,mBAAmB,EAEvC,OAAAF,EAAQ,IAAI,CAACG,EAAEC,IAAKH,EAAO,eAAeG,CAAC,EAAE,IAAID,CAAC,CAAC,EACnDD,EAAO,OAASD,EAChBC,EAAO,QAAQ,KAAK,EAAE,WAAW,EACjCA,EAAO,MAAM,EACNA,CACX,EAGA,aAAc,SAEVG,EAAS,EACTC,EAAa,IACbC,EAAY,IACZC,EAAS,EACTC,EAAU,EACVC,EAAU,GACVC,EAAQ,EACRC,EAAa,EACbC,EAAQ,EACRC,EAAa,EACbC,EAAY,EACZC,EAAgB,EAChBC,EAAa,EACbC,GAAQ,EACRC,EAAa,EACbC,GAAW,EACXC,EAAQ,EACRC,EAAgB,EAChBC,EAAQ,EACRC,EAAU,EACVC,EAAS,EAEb,CAEI,IAAIC,EAAM,KAAK,GAAG,EAAGC,EAAOC,IAAKA,GAAE,EAAE,GAAG,EAAGC,EAAa,KAAK,WACzDC,GAAajB,GAAS,IAAMa,EAAMG,EAAaA,EAC/CE,EAAiBxB,IACZ,EAAID,EAAW,EAAE,KAAK,OAAO,EAAIA,GAAcoB,EAAMG,EAC1DG,EAAI,CAAC,EAAGC,EAAI,EAAGC,GAAK,EAAG,EAAI,EAAGC,EAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,EAAI,EAAGC,EAAGC,EAG7DC,GAAU,EAAGC,EAAIhB,EAAM,KAAK,IAAID,CAAM,EAAI,EAAII,EAC9Cc,EAAM,KAAK,IAAID,CAAC,EAAGE,EAAQ,KAAK,IAAIF,CAAC,EAAI,EAAID,GAC7CI,EAAK,EAAID,EAAOE,GAAK,GAAGH,EAAME,EAAIE,IAAM,EAAIH,GAASC,EACrDG,GAAM,EAAIrB,EAAKF,CAAM,EAAIkB,GAAO,EAAIE,EACpCI,GAAK,EAAEtB,EAAKF,CAAM,EAAIkB,GAAOE,EAAIK,GAAKF,EACtCG,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAgBjC,IAbA9C,EAASA,EAASqB,EAAa,EAC/BN,GAASM,EACTpB,GAAWoB,EACXnB,GAAWmB,EACXR,GAASQ,EACTf,GAAc,IAAMY,EAAMG,GAAY,EACtCV,GAAcO,EAAMG,EACpBd,GAAaW,EAAMG,EACnBb,GAAiBa,EACjBZ,EAAaA,EAAaY,EAAa,EACvCxB,GAAU,KAAK,OAGXmC,EAAShC,EAASe,EAAQd,EAAUC,EAAUW,EAAQ,EACtD,EAAImB,EAAQR,EAAE,GAAG,EAAIM,EAAIjC,EAEnB,EAAEgC,IAAGjB,GAAS,IAAI,KAEpBkB,EAAI3B,EAAOA,EAAM,EAAGA,EAAM,EAAGA,EAAM,EAC/B,KAAK,IAAIsB,EAAEA,CAAC,EACZ,KAAK,IAAI,KAAK,IAAI,KAAK,IAAIA,CAAC,EAAE,CAAC,EAAE,EAAE,EACnC,GAAG,EAAEA,EAAEP,EAAI,EAAE,GAAG,EAChB,EAAE,EAAE,KAAK,IAAI,KAAK,MAAMO,EAAEP,CAAG,EAAEO,EAAEP,CAAG,EACpC,KAAK,IAAIO,CAAC,EAEdK,GAAKrB,EACG,EAAIO,EAAUA,EAAQ,KAAK,IAAIE,EAAI,EAAET,CAAU,EAC7C,GACNU,EAAKW,CAAC,EAAG,KAAK,IAAIA,CAAC,GAAG1B,GACrB,EAAIJ,EAAS,EAAEA,EAChB,EAAIA,EAASe,EACb,GAAI,EAAEf,GAAQe,GAAQ,EAAED,GACxB,EAAId,EAAUe,EAAQd,EACtBa,EACA,EAAIkB,EAASnB,GACZmB,EAAS,EAAInB,GAAOX,EACrBY,EACA,GAEJgB,EAAIjB,EAAQiB,EAAE,GAAKjB,EAAQ,EAAI,GAC1B,EAAEmB,EAAOnB,EAAO,GAAKmB,EAAO,GAAGnB,GAChCW,EAAE,EAAEX,EAAM,CAAC,EAAE,EAAEhB,GAAUiC,EAEzBb,IACAa,EAAIgB,EAAKJ,GAAGC,EAAKF,IAAIE,EAAGC,GAAMJ,GAAII,EAAGd,GAAKS,GAAGM,EAAKP,IAAIO,EAAGC,KAGjEf,GAAKhC,GAAaM,GAASC,GACvB,KAAK,IAAIK,EAAWe,IAAI,EAC5BD,GAAKM,EAAIA,EAAErB,GAAM,KAAK,IAAI,GAAG,CAAC,EAE1BiB,GAAK,EAAEA,EAAInB,IAEXT,GAAaQ,EACbgB,GAAkBhB,EAClBoB,EAAI,GAGJlB,GAAc,EAAE,EAAEmB,GAAInB,KAEtBV,EAAYwB,EACZlB,EAAQiB,GACRK,EAAIA,GAAK,GAIjB,OAAOH,CACX,EAGA,QAAS,SAASuB,EAAe,EAAGC,EAAkB,IACtD,CACI,OAAOA,EAAoB,IAAID,EAAe,GAClD,CAEJ,ECpMA,IAAME,GAAgB,CACH,EACI,IACD,IACH,EACC,EACA,GACF,EACK,EACL,EACK,EACD,EACI,EACH,EACL,EACK,EACF,EACH,EACQ,EACR,EACE,EACD,CACnB,EAIO,IAAMC,EAAN,KAA+C,CAClD,GACA,QACA,YAAYC,EAAYC,EAAiC,CACrD,KAAK,QAAUC,GAAc,IAAI,CAACC,EAAGC,IAAMH,EAAQG,CAAC,GAAKD,CAAC,EAE1D,KAAK,GAAKH,CACd,CACA,KAAKK,EAAYC,EAAqD,CAClE,IAAMC,EAAK,KAAK,QAAQ,MAAM,EAE9B,OAAAA,EAAG,CAAC,GAAMF,EAAK,QAAU,EAClBG,GAAK,KAAK,GAAGD,CAAE,CAC1B,CACJ,ECxCO,SAASE,EAAQC,IAA4B,CAChD,OAAOC,GAAS,EAAQA,EAAM,eAA4BD,EAC9D,CAEO,SAASE,EAAOC,EAAcH,IAA4B,CAC7D,IAAMI,EAASL,EAAQC,EAAQ,CAAC,EAChC,OAAOC,GAAS,CACZ,GAAI,CAACG,EAAOH,CAAK,EAAG,MAAO,GAC3B,IAAMI,EAAQJ,EAAM,MAAmBD,CAAK,EAE5C,OADcC,EAAM,WAAwBD,CAAK,EACnCG,EAAOE,EAAO,EAAI,CACpC,CACJ,CAEO,SAASC,EAAqBC,EAAwB,CAEzD,OAAON,GAAS,EAAIO,GAAW,KAAK,IAAI,EAAG,CAAEP,EAAM,cAAyB,EAAIM,CAAQ,CAC5F,CAEO,SAASE,EAAYC,EAAgBC,IAA4B,CACpE,IAAMC,EAAUC,EAAOH,CAAM,EAC7B,OAAOT,GAAS,CACZ,IAAMa,EAAIF,EAAQX,CAAK,EACvB,GAAI,CAACa,EAAG,OACR,IAAMC,EAAQD,EAAKb,EAAM,WAAwB,MAAMU,CAAM,EAAE,OAAO,CAACG,EAAGE,IAAMF,EAAIE,EAAG,CAAC,EACxF,OAAQf,EAAM,QAAqB,GAAG,CAACc,CAAK,CAChD,CACJ,CAGO,SAASE,EAAQC,EAAaC,EAAsB,CACvD,IAAMC,EAAOP,EAAOK,CAAG,EACjBG,EAAOR,EAAOM,CAAM,EAC1B,OAAOlB,GAAS,CACZ,IAAMqB,EAAOrB,EAAM,QACbsB,EAAS,KAAK,MAAMF,EAAKpB,CAAK,CAAE,EAChCuB,EAAOF,EAAK,MAAM,CAACC,CAAM,EACzBE,EAASL,EAAKnB,CAAK,EACnByB,EAAIF,EAAK,OAAO,CAACV,EAAGE,IAAMF,EAAIE,EAAG,CAAC,EAAIQ,EAAK,OAASC,EAC1D,MAAO,IAAK,EAAI,KAAK,IAAI,CAACC,CAAC,EAC/B,CACJ,CAIO,SAASC,KAAYC,EAAkC,CAC1D,IAAMC,EAAeD,EAAQ,IAAIE,GAAK,MAAM,QAAQA,CAAC,EAAI,CAACjB,EAAOiB,EAAE,CAAC,CAAC,EAAGjB,EAAOiB,EAAE,CAAC,CAAC,CAAC,EAAa,CAACjB,EAAOiB,CAAC,EAAG,IAAM,CAAC,CAAU,EAC9H,OAAO7B,GAAS,CACZ,IAAM8B,EAAMF,EAAa,IAAI,CAAC,CAACf,EAAGE,CAAC,IAAM,CAACF,EAAEb,CAAK,EAAGe,EAAEf,CAAK,GAAK,CAAC,CAAU,EACrE+B,EAAQD,EAAI,QAAQ,CAAC,CAACD,EAAGG,CAAC,IAAMH,IAAM,QAAa,CAAC,MAAMG,CAAC,EAAI,CAACH,CAAC,EAAI,CAAC,CAAC,EACvEI,EAAQH,EAAI,QAAQ,CAAC,CAACD,EAAGG,CAAC,IAAMH,IAAM,QAAa,CAAC,MAAMG,CAAC,EAAI,CAACA,CAAC,EAAI,CAAC,CAAC,EAC7E,GAAI,EAAAD,EAAM,SAAW,GAAKE,EAAM,MAAMD,GAAKA,IAAM,CAAC,GAClD,OAAOE,EAAO,OAAOH,EAAOE,CAAK,CACrC,CACJ,CAEO,SAASE,KAAaC,EAAwB,CACjD,IAAMC,EAAUD,EAAO,IAAIxB,CAAM,EACjC,OAAOZ,GAASqC,EAAQ,IAAIR,GAAKA,EAAE7B,CAAK,CAAC,EAAE,OAAO,CAACa,EAAGE,KAAOF,GAAK,IAAME,GAAK,GAAI,CAAC,CACtF,CC1DA,IAAMuB,GAAW,CAGjB,EAEMC,EAAW,IAAIC,EAASF,GAAU,CACpCG,GAAS,CACL,KAAM,IAAM,KAAK,IAAI,EAAG,EAAI,EAAE,EAC9B,eAAgB,GAChB,MAAO,GACX,CAAC,EACDC,GAAY,CACP,EAAeC,EAAS,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EACtC,EAAWA,EAAS,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,GAAI,CAAC,CAAC,EACjG,EAAcA,EAAS,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAC9C,EAAaA,EAAS,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EACrD,EAAc,IAAM,CACzB,CAAC,EACDC,EAAc,OACVD,EACI,CAAC,EAAGE,EAAU,IAAKC,GAAgB,CAAC,CAAC,EACrC,CAAC,GAAK,CAAC,EACP,CAAC,EAAG,GAAG,EACP,CAACC,EAAQ,IAAM,CAAC,EAAGF,EAAUE,EAAQ,IAAM,CAAC,EAAG,EAAE,CAAC,EAClD,CAACC,EAAaC,GAAeA,EAAM,cAAqB,GAAW,EAAG,GAAG,EACzE,CAACD,EAAaC,GAAeA,EAAM,cAAwB,GAAc,EAAG,EAAE,CAClF,CAAC,EACLL,EAAc,QACVD,EACI,CAACO,EAAO,IAAgB,EAAG,GAAG,EAC9B,CAAC,GAAK,CAAC,EACP,CAAC,EAAG,EAAE,EACN,CAACH,EAAQ,GAAK,CAAC,EAAGF,EAAUE,EAAQ,GAAK,CAAC,EAAG,EAAE,CAAC,EAChD,CAACC,EAAaC,GAAeA,EAAM,cAAqB,GAAW,EAAG,GAAG,EACzE,CAACD,EAAaC,GAAeA,EAAM,cAAwB,GAAc,EAAG,EAAE,CAClF,CAAC,EACLL,EAAc,SACVD,EACI,CAAC,EAAGE,EAAUC,GAAgB,EAAG,EAAE,CAAC,EACpC,CAAC,GAAKD,EAAUK,EAAO,IAAa,EAAG,EAAE,CAAC,EAC1C,CAAC,EAAG,EAAE,EACN,CAACH,EAAQ,GAAK,CAAC,EAAGF,EAAUE,EAAQ,GAAK,CAAC,EAAG,EAAE,CAAC,EAChD,CAACC,EAAaC,GAAeA,EAAM,cAAqB,GAAW,EAAG,GAAG,EACzE,CAACD,EAAaC,GAAeA,EAAM,cAAwB,GAAc,EAAG,EAAE,CAClF,CAAC,EACLE,GAAY,mBACRR,EACI,CAAC,GAAI,GAAI,EACT,CAAC,GAAI,GAAG,EACR,CAAC,GAAI,CAAC,EACN,CAAC,GAAI,CAAC,EACN,CAAC,GAAI,CAAC,CACV,CAAC,EACLS,KACIT,EACI,CAAC,EAAGU,EAAqB,CAAC,CAAC,EAC3B,CAAC,EAAGA,EAAqB,CAAC,CAAC,EAC3B,CAAC,EAAGA,EAAqB,CAAC,CAAC,CAC/B,CAAC,CACT,CAAC,EAEKC,GAAc,CAChB,IAAIC,EAAmB,QAAS,CAAC,EAAG,EAAG,IAAK,CAAE,CAAE,IAAK,EAAG,CAAE,CAAE,CAAE,CAAE,CAAE,GAAI,EAAG,CAAE,CAAE,CAAE,GAAG,CAAC,EACnF,IAAIA,EAAmB,OAAQ,CAAC,EAAG,EAAG,GAAI,CAAE,CAAE,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,IAAK,CAAE,CAAC,CAAC,EAC5E,IAAIA,EAAmB,SAAU,CAAC,CAAE,EAAG,KAAM,CAAE,CAAE,IAAK,EAAG,KAAM,CAAE,CAAE,CAAE,CAAE,CAAE,CAAC,CAAC,CAC/E,EAEA,SAASC,IAAO,CACEjB,EAAS,KAAK,EACtB,QAAQkB,GAAK,CACXA,EAAE,YACFH,GAAY,KAAKI,GAAKA,EAAE,KAAOD,EAAE,UAAU,GAAG,KAAKA,EAAGlB,EAAS,MAAM,SAAmB,CAChG,CAAC,EACDoB,GAAS,YAAc,KAAK,UAAUpB,EAAS,MAAO,OAAW,CAAC,EAClE,WAAWiB,GAAMjB,EAAS,MAAM,UAAsB,GAAI,CAC9D,CAGA,IAAMqB,GAA4BC,GAAwB,SAAS,cAAcA,CAAC,EAE5EC,GAAWF,GAAqB,QAAQ,EACxCD,GAAWC,GAAkB,OAAO,EAE1CE,GAAS,iBAAiB,QAAS,IAAM,CACrCA,GAAS,OAAO,EAChBN,GAAK,CACT,CAAC",
  "names": ["toWFun", "x", "state", "AutoSong", "#uniforms", "uniforms", "generators", "newUniforms", "notes", "gen", "res", "dissonance", "x", "xm1", "abs", "sq", "NORM_MAGIC", "RNG", "lo", "hi", "from", "weights", "one", "b", "randVal", "sum", "i", "pct", "a", "bias", "breakpoint", "mu", "sigma", "z", "u1", "u2", "zz", "Random", "masterClock", "weightMap", "reUpRhythmAt", "chosenBases", "tickers", "reUp", "i", "rollover", "state", "constant", "obj", "once", "changeEvery", "what", "when", "fun", "val", "drumGenerator", "drum", "strengthFun", "history", "vol", "rootNoteGenerator", "steps", "note", "howmuch", "Random", "ZZFX", "parameters", "samples", "buffer", "source", "d", "i", "volume", "randomness", "frequency", "attack", "sustain", "release", "shape", "shapeCurve", "slide", "deltaSlide", "pitchJump", "pitchJumpTime", "repeatTime", "noise", "modulation", "bitCrush", "delay", "sustainVolume", "decay", "tremolo", "filter", "PI2", "sign", "v", "sampleRate", "startSlide", "startFrequency", "b", "t", "tm", "j", "r", "c", "s", "f", "length", "quality", "w", "cos", "alpha", "a0", "a1", "a2", "b0", "b1", "b2", "x2", "x1", "y2", "y1", "semitoneOffset", "rootNoteFrequency", "defaultParams", "ZzFXDrumInstrument", "id", "zzArray", "defaultParams", "d", "i", "note", "_tickLen", "zz", "ZZFX", "startOf", "which", "state", "fracOf", "frac", "pStart", "tVal", "consonanceOfInterval", "interval", "dissonance", "backHistory", "amount", "column", "amount2", "toWFun", "a", "index", "b", "density", "den", "window", "den2", "win2", "hist", "winLen", "bits", "tgtDen", "x", "pickRand", "choices", "fixedChoices", "v", "now", "vThis", "w", "wThis", "Random", "reduceMul", "values", "values2", "uniforms", "autoSong", "AutoSong", "constant", "masterClock", "pickRand", "drumGenerator", "reduceMul", "startOf", "density", "backHistory", "state", "fracOf", "changeEvery", "rootNoteGenerator", "consonanceOfInterval", "instruments", "ZzFXDrumInstrument", "tick", "n", "i", "dataArea", "$", "s", "startBtn"]
}
